Version 1
SubGoalCombiner SGC_AND
INITSECTION
KBSECTION
//REGION REGISTER_START
PROC
LLENEMY_Upgrades_Internal_Register_Start()
AND
GlobalGetFlag("LLENEMY_HardModeEnabled", _HardModeEnabled)
THEN
LLENEMY_Upgrades_RegisterAll(_HardModeEnabled);
LLENEMY_Upgrades_Internal_RegisterModUpgrades_Start();

PROC
LLENEMY_Upgrades_RegisterAll((INTEGER)_HardModeEnabled)
THEN
DB_NOOP(1);
//END_REGION

//REGION REGISTERING
PROC
LLENEMY_Upgrades_AddGroup((STRING)_Group, (STRING)_GlobalDisableFlag, (STRING)_RolledForFlag, (STRING)_GroupSuccessFlag)
THEN
DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisableFlag, _RolledForFlag, _GroupSuccessFlag);

PROC
LLENEMY_Upgrades_AddType((STRING)_Group, (STRING)_Type, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (INTEGER)_ChallengePoints)
AND
NOT DB_LLENEMY_Upgrades_TypeRollValues(_Group, _Type, _, _)
THEN
DB_LLENEMY_Upgrades_TypeRollValues(_Group, _Type, 1, 0);

PROC
LLENEMY_Upgrades_AddType((STRING)_Group, (STRING)_Type, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (INTEGER)_ChallengePoints)
AND
GlobalGetFlag("LLENEMY_HardModeEnabled", _HardModeEnabled)
THEN
DB_LLENEMY_Upgrades_Types(_Group, _Type, _MinRoll, _MaxRoll, _ChallengePoints);
LLENEMY_Upgrades_Register_TypeUpgrades(_Group, _Type, _HardModeEnabled);

PROC
LLENEMY_Upgrades_Register_TypeUpgrades((STRING)_Group, (STRING)_Type)
AND
GlobalGetFlag("LLENEMY_HardModeEnabled", _HardModeEnabled)
THEN
LLENEMY_Upgrades_Register_TypeUpgrades(_Group, _Type, _HardModeEnabled);

PROC
LLENEMY_Upgrades_Register_TypeUpgrades((STRING)_Group, (STRING)_Type, (INTEGER)_HardModeEnabled)
THEN
DB_NOOP(1);

/*
PROC
LLENEMY_Upgrades_AddType((STRING)_Group, (STRING)_Type, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (INTEGER)_ChallengePoints)
AND
DB_LLENEMY_Upgrades_GroupRollValues(_Group, _Type, _RollMaxInt)
AND
_MaxRoll > _RollMaxInt
THEN
NOT DB_LLENEMY_Upgrades_GroupRollValues(_Group, _Type, _RollMaxInt);
DB_LLENEMY_Upgrades_GroupRollValues(_Group, _Type, _MaxRoll);
*/

PROC
LLENEMY_Upgrades_AddStatus((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_Range, (INTEGER)_ChallengePoints)
THEN
LLENEMY_Upgrades_AddStatus(_Group, _Type, _Status, _Range, _ChallengePoints, -1.0);

PROC
LLENEMY_Upgrades_AddStatus((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_Range, (INTEGER)_ChallengePoints, (REAL)_Duration)
AND
NOT DB_LLENEMY_Upgrades_TypeRollValues(_Group, _Type, _, _)
THEN
DB_LLENEMY_Upgrades_TypeRollValues(_Group, _Type, 1, 0);

PROC
LLENEMY_Upgrades_AddStatus((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_Range, (INTEGER)_ChallengePoints, (REAL)_Duration)
AND
DB_LLENEMY_Upgrades_TypeRollValues(_Group, _Type, _StartInt, _RollMaxInt)
AND
IntegerSum(_StartInt, _Range, _EndInt)
AND
IntegerSum(_EndInt, 1, _NextStartInt)
AND
IntegerMax(_EndInt, 999, _MinEnd) // The max roll should be 999 or greater
THEN
NOT DB_LLENEMY_Upgrades_TypeRollValues(_Group, _Type, _StartInt, _RollMaxInt);
DB_LLENEMY_Upgrades_TypeRollValues(_Group, _Type, _NextStartInt, _MinEnd);
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _StartInt, _EndInt, _Duration, _ChallengePoints);

/*
IF
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _StartInt, _EndInt, _Duration, _ChallengePoints)
AND
IntegertoString(_StartInt, _StartStr)
AND
IntegertoString(_EndInt, _EndStr)
THEN
LeaderLog_Log("TRACE", "[LLENEMY_00_UpgradesMain:DB_LLENEMY_Upgrades_Statuses] Added (",_Group,":",_Type,":",_Status,") Start(",_StartStr,") End(",_EndStr,").");
*/

PROC
LLENEMY_Upgrades_AddStatusToRange((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (INTEGER)_ChallengePoints)
THEN
LLENEMY_Upgrades_AddStatusToRange(_Group, _Type, _Status, _MinRoll, _MaxRoll, _ChallengePoints, -1.0);

PROC
LLENEMY_Upgrades_AddStatusToRange((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (INTEGER)_ChallengePoints, (REAL)_Duration)
THEN
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _MinRoll, _MaxRoll, _Duration, _ChallengePoints);

//Hopefully this should never actually be needed, as it could create gaps of "nothing" if the LastInt is upped without anything between the two values
PROC
LLENEMY_Upgrades_AddStatusToRange((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (INTEGER)_ChallengePoints, (REAL)_Duration)
AND
DB_LLENEMY_Upgrades_TypeRollValues(_Group, _Type, _StartInt, _RollMaxInt)
AND
_MaxRoll > _RollMaxInt
THEN
NOT DB_LLENEMY_Upgrades_TypeRollValues(_Group, _Type, _StartInt, _RollMaxInt);
DB_LLENEMY_Upgrades_TypeRollValues(_Group, _Type, _StartInt, _MaxRoll);
//END_REGION

//REGION MOD_SUPPORT
// Register a UUID the system will check to see if a mod is active. UUIDs require the script extender.
PROC
LLENEMY_Upgrades_Register_ModSupport((GUIDSTRING)_UUID, (STRING)_GoalName)
THEN
DB_LLENEMY_Upgrades_ModSupport(_UUID, _GoalName);

/* [OSITOOLS_ONLY]
QRY
LLENEMY_Upgrades_QRY_ModIsActive((GUIDSTRING)_UUID, (STRING)_GoalName)
AND
NRD_IsModLoaded(_UUID, 1)
THEN
DB_NOOP(1);
*/

// [BEGIN_NO_OSITOOLS]
QRY
LLENEMY_Upgrades_QRY_ModIsActive((GUIDSTRING)_UUID, (STRING)_GoalName)
AND
SysStatus(_GoalName, _Status) // Exists
THEN
DB_NOOP(1);
// [END_NO_OSITOOLS]

PROC
LLENEMY_Upgrades_Register_TypeUpgradesForMod((GUIDSTRING)_UUID, (STRING)_Group, (STRING)_Type, (INTEGER)_HardModeEnabled)
THEN
DB_NOOP(1);
//END_REGION

//REGION MODDED_UPGRADES_REGISTERING
PROC
LLENEMY_Upgrades_Internal_RegisterModUpgrades_Start()
AND
DB_LLENEMY_Upgrades_ModSupport(_UUID, _GoalName)
AND
LLENEMY_Upgrades_QRY_ModIsActive(_UUID, _GoalName)
THEN
DB_LLENEMY_Upgrades_Temp_ModUpgradesActive(_UUID, _GoalName, 1);

PROC
LLENEMY_Upgrades_Internal_RegisterModUpgrades_Start()
AND
GlobalGetFlag("LLENEMY_HardModeEnabled", _HardModeEnabled)
AND
DB_LLENEMY_Upgrades_Temp_ModUpgradesActive(_UUID, _GoalName, 1)
AND
DB_LLENEMY_Upgrades_Types(_Group, _Type, _MinRoll, _MaxRoll, _ChallengePoints)
THEN
LLENEMY_Upgrades_Register_ModUpgrades(_UUID, _Group, _Type, _HardModeEnabled);
LLENEMY_Upgrades_Internal_RegisterDatabaseModUpgrades(_UUID, _Group, _Type);

PROC
LLENEMY_Upgrades_Register_ModUpgradesForType((STRING)_Group, (STRING)_Type)
AND
GlobalGetFlag("LLENEMY_HardModeEnabled", _HardModeEnabled)
AND
DB_LLENEMY_Upgrades_Temp_ModUpgradesActive(_UUID, _GoalName, 1)
THEN
LLENEMY_Upgrades_Register_ModUpgrades(_UUID, _Group, _Type, _HardModeEnabled);
LLENEMY_Upgrades_Internal_RegisterDatabaseModUpgrades(_UUID, _Group, _Type);

//This is called manually by EUO when mods should register upgrades for a specific group/type
PROC
LLENEMY_Upgrades_Register_ModUpgrades((GUIDSTRING)_UUID, (STRING)_Group, (STRING)_Type, (INTEGER)_HardModeEnabled)
THEN
DB_NOOP(1);

PROC
LLENEMY_Upgrades_Internal_RegisterDatabaseModUpgrades((GUIDSTRING)_UUID, (STRING)_Group, (STRING)_Type)
AND
DB_LLENEMY_ModApi_ModUpgrades((GUIDSTRING)_UUID, (STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_Chance, (INTEGER)_ChallengePoints)
THEN
NOT DB_LLENEMY_ModApi_ModUpgrades(_UUID, _Group, _Type, _Status, _Chance, _ChallengePoints);
LLENEMY_Upgrades_AddStatus(_Group, _Type, _Status, _Chance, _ChallengePoints);

PROC
LLENEMY_Upgrades_Internal_RegisterDatabaseModUpgrades((GUIDSTRING)_UUID, (STRING)_Group, (STRING)_Type)
AND
DB_LLENEMY_ModApi_ModUpgrades((GUIDSTRING)_UUID, (STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_Chance, (INTEGER)_ChallengePoints, (REAL)_Duration)
THEN
NOT DB_LLENEMY_ModApi_ModUpgrades(_UUID, _Group, _Type, _Status, _Chance, _ChallengePoints, _Duration);
LLENEMY_Upgrades_AddStatus(_Group, _Type, _Status, _Chance, _ChallengePoints, _Duration);
//END_REGION

//REGION CLEAR
PROC
LLENEMY_Upgrades_Clear_Group((STRING)_Group)
AND
DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisableFlag, _RolledForFlag, _GroupSuccessFlag)
THEN
NOT DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisableFlag, _RolledForFlag, _GroupSuccessFlag);

PROC
LLENEMY_Upgrades_Clear_Group((STRING)_Group)
AND
DB_LLENEMY_Upgrades_Types(_Group, _Type, _MinRoll, _MaxRoll, _ChallengePoints)
THEN
NOT DB_LLENEMY_Upgrades_Types(_Group, _Type, _MinRoll, _MaxRoll, _ChallengePoints);
LLENEMY_Upgrades_Clear_UpgradesForType(_Group, _Type);

PROC
LLENEMY_Upgrades_Clear_UpgradesForType((STRING)_Group, (STRING)_Type)
AND
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _StartInt, _CappedEnd, _Duration, _ChallengePoints)
THEN
NOT DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _StartInt, _CappedEnd, _Duration, _ChallengePoints);

PROC
LLENEMY_Upgrades_Clear_UpgradesForType((STRING)_Group, (STRING)_Type)
AND
DB_LLENEMY_Upgrades_TypeRollValues(_Group, _Type, _NextStartInt, _CappedEnd)
THEN
NOT DB_LLENEMY_Upgrades_TypeRollValues(_Group, _Type, _NextStartInt, _CappedEnd);
//END_REGION

//REGION RESET_DATA
PROC
LLENEMY_Upgrades_ResetUpgradeData()
THEN
SysClear("DB_LLENEMY_Upgrades_Groups", 4);
SysClear("DB_LLENEMY_Upgrades_Types", 5);
SysClear("DB_LLENEMY_Upgrades_Statuses", 7);
SysClear("DB_LLENEMY_Upgrades_TypeRollValues", 4);
SysClear("DB_LLENEMY_LastGrenadeInt", 2);
SysClear("DB_LLENEMY_GrenadeSkills", 3);
GlobalClearFlag("LLENEMY_TalentUpgrades_DivineTalentsAdded");
LLENEMY_ModSupport_InitSettings();
LLENEMY_Upgrades_Internal_Register_Start();
//END_REGION

//REGION UPDATE_STATUS_REMOVAL
PROC
LLENEMY_Debug_RemovePermanentStatus((STRING)_Status)
AND
DB_CombatCharacters(_Enemy, _)
AND
LeaderLib_Helper_QRY_HasPermanentStatus(_Enemy, _Status)
THEN
RemoveStatus(_Enemy, _Status);

//Two bonus weapon aura statuses apparently cause lag?
PROC
LLENEMY_Debug_RemoveStackedWeaponAuras((STRING)_Status, (STRING)_Status2)
AND
DB_CombatCharacters(_Enemy, _CombatID)
AND
NOT DB_IsPlayer(_Enemy)
AND
HasActiveStatus(_Enemy, _Status, 1)
AND
DB_CombatCharacters(_OtherEnemy, _CombatID)
AND
NOT DB_IsPlayer(_OtherEnemy)
AND
HasActiveStatus(_OtherEnemy, _Status2, 1)
THEN
RemoveStatus(_Enemy, _Status);
//RemoveStatus(_OtherEnemy, _Status2);
//END_REGION

//REGION UPDATES
PROC
LeaderUpdater_ModUpdated("EnemyUpgradeOverhaul", "LaughingLeader", (STRING)_OldVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_OldVersion, 1, 1, 1, 2)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:UpgradesMain:LeaderUpdater_ModUpdated] Updating upgrade settings from version [",_OldVersion,"].");
LLENEMY_Debug_RemovePermanentStatus("EVASION_AURA");
LLENEMY_Debug_RemovePermanentStatus("EVASION");

PROC
LeaderUpdater_ModUpdated("EnemyUpgradeOverhaul", "LaughingLeader", (STRING)_OldVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_OldVersion, 1, 1, 2, 0)
THEN
LLENEMY_Debug_RemoveStackedWeaponAuras("VENOM_AURA", "FIRE_BRAND_AURA");

PROC
LeaderUpdater_ModUpdated("EnemyUpgradeOverhaul", "LaughingLeader", (STRING)_OldVersion, (STRING)_NewVersion)
THEN
LLENEMY_Upgrades_ResetUpgradeData();

/* [OSITOOLS_ONLY]
PROC
LeaderLib_Mods_OnVersionChanged(046aafd8-ba66-4b37-adfb-519c1a5d04d7, (INTEGER)_LastVersion, (INTEGER)_NewVersion)
AND
_LastVersion >= 536870923
AND
_LastVersion < 536870925
THEN
CharacterLaunchOsirisOnlyIterator("LLENEMY_ApplyInfoStatus");

IF
StoryEvent((CHARACTERGUID)_Char, "LLENEMY_ApplyInfoStatus")
AND
CharacterIsDead(_Char, 0)
AND
GetUUID(_Char, _UUID)
THEN
NRD_ModCall("SuperEnemyUpgradeOverhaul", "UpgradeInfo_ApplyInfoStatus", _UUID);
*/
//END_REGION

//REGION CLEAR_FLAGS
/* Used to allow rerolling upgrades if an enemy leaves combat for too long. */

IF
ObjectLeftCombat((CHARACTERGUID)_Enemy, _CombatID)
AND
CharacterIsDead(_Enemy, 0)
AND
ObjectGetFlag(_Enemy, "LLENEMY_UpgradesAdded", 1)
THEN
DB_LLENEMY_Upgrades_Temp_ResetFlags(_Enemy, _CombatID);
LLENEMY_Upgrades_Internal_StartCombatResetTimer(_CombatID);

IF
ObjectEnteredCombat((CHARACTERGUID)_Enemy, _)
AND
DB_LLENEMY_Upgrades_Temp_ResetFlags(_Enemy, _CombatID)
THEN
NOT DB_LLENEMY_Upgrades_Temp_ResetFlags(_Enemy, _CombatID);

PROC
LLENEMY_Upgrades_Internal_StartCombatResetTimer((INTEGER)_CombatID)
AND
NOT DB_LLENEMY_Upgrades_Temp_ResetFlagsTimer(_CombatID, _)
AND
IntegertoString(_CombatID, _CombatStr)
AND
StringConcatenate("Timers_LLENEMY_Upgrades_ResetFlags_", _CombatStr, _TimerName)
THEN
DB_LLENEMY_Upgrades_Temp_ResetFlagsTimer(_CombatID, _TimerName);

PROC
LLENEMY_Upgrades_Internal_StartCombatResetTimer((INTEGER)_CombatID)
AND
DB_LLENEMY_Upgrades_Temp_ResetFlagsTimer(_CombatID, _TimerName)
THEN
TimerCancel(_TimerName);
TimerLaunch(_TimerName, 5000);

IF
TimerFinished(_TimerName)
AND
DB_LLENEMY_Upgrades_Temp_ResetFlagsTimer(_CombatID, _TimerName)
THEN
NOT DB_LLENEMY_Upgrades_Temp_ResetFlagsTimer(_CombatID, _TimerName);
LLENEMY_Upgrades_Internal_ResetFlagsForCombat(_CombatID);

PROC
LLENEMY_Upgrades_Internal_ResetFlagsForCombat((INTEGER)_CombatID)
AND
DB_LLENEMY_Upgrades_Temp_ResetFlags(_Enemy, _CombatID)
THEN
NOT DB_LLENEMY_Upgrades_Temp_ResetFlags(_Enemy, _CombatID);
LLENEMY_Upgrades_ClearFlags(_Enemy);

IF
CharacterDied(_Char)
THEN
LLENEMY_Upgrades_ClearFlags(_Char);

PROC
LLENEMY_Upgrades_ClearFlags((CHARACTERGUID)_Char)
AND
DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisableFlag, _RolledForFlag, _GroupSuccessFlag)
THEN
ObjectClearFlag(_Char, _RolledForFlag);

PROC
LLENEMY_Upgrades_ClearFlags((CHARACTERGUID)_Char)
THEN
ObjectClearFlag(_Char, "LLENEMY_UpgradesAdded", 0);

PROC
LLENEMY_Upgrades_ClearFlags((CHARACTERGUID)_Char)
AND
NOT DB_GlobalFlag("LLENEMY_WorldUpgradesEnabled")
THEN
ObjectClearFlag(_Char, "LLENEMY_WorldUpgradesAdded", 0);
//END_REGION

//REGION QUERIES
QRY
LLENEMY_Upgrades_QRY_CanRollForGroup((STRING)_Group)
AND
DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisableFlag, _RolledForFlag, _GroupSuccessFlag)
AND
GlobalGetFlag(_GlobalDisableFlag, 0)
THEN
DB_NOOP(1);

QRY
LLENEMY_Upgrades_QRY_CanRollForStatus((STRING)_Status)
AND
NOT DB_LLENEMY_Upgrades_Statuses(_, _, _Status, _, _, _, _)
THEN
DB_NOOP(1);

QRY
LLENEMY_Upgrades_QRY_CanRollForStatus((CHARACTERGUID)_Char, (STRING)_Status)
AND
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _StartInt, _CappedEnd, _Duration, _ChallengePoints)
AND
LLENEMY_Upgrades_QRY_CanRollForGroup(_Group)
AND
LLENEMY_Upgrades_QRY_CanApplyGroupTypeUpgrades(_Char, _Group, _Type)
AND
NOT DB_LLENEMY_StatusUpgradeBlocked(_Char, _Group, _Type)
AND
LLENEMY_Upgrades_QRY_CanApplyUpgrade(_Char, _Group, _Type, _Status, _Duration)
AND
NOT DB_LLENEMY_StatusUpgradeBlocked(_Char, _Group, _Type, _Status)
THEN
DB_NOOP(1);
//END_REGION

//REGION APPLYING
PROC
LLENEMY_Upgrades_RollForUpgrades((CHARACTERGUID)_Char)
// [BEGIN_NO_OSITOOLS]
AND
LeaderLib_Random_QRY(999)
AND
DB_LeaderLib_Random(_Roll)
// [END_NO_OSITOOLS]
/* [OSITOOLS_ONLY]
AND
LeaderLib_Ext_Random(0,999,_Roll)
*/
THEN
NOT DB_LeaderLib_Random(_Roll);
LLENEMY_Upgrades_Internal_OnRoll(_Char, _Roll);

PROC
LLENEMY_Upgrades_Internal_OnRoll((CHARACTERGUID)_Char, (INTEGER)_Roll)
AND
DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisableFlag, _RolledForFlag, _GroupSuccessFlag)
AND
GlobalGetFlag(_GlobalDisableFlag, 0)
THEN
LLENEMY_Upgrades_Internal_SetRolledFlag(_Char, _RolledForFlag);
LLENEMY_Upgrades_OnRollForGroup(_Char, _Roll, _Group);

PROC
LLENEMY_Upgrades_Internal_OnRoll((CHARACTERGUID)_Char, (INTEGER)_Roll)
AND
_Roll == 0
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Buffs:OnRollForGroup] Rolled a 0! Critical failure!");
LLENEMY_Upgrades_OnCriticalFailure(_Char);

PROC
LLENEMY_Upgrades_OnCriticalFailure((CHARACTERGUID)_Char)
THEN
DB_NOOP(1);

PROC
LLENEMY_Upgrades_Internal_SetRolledFlag((CHARACTERGUID)_Char, (STRING)_Flag)
AND
_Flag != ""
AND
ObjectGetFlag(_Char, _Flag, 0)
THEN
ObjectSetFlag(_Char, _Flag);

PROC
LLENEMY_Upgrades_ResetRolledFlags((CHARACTERGUID)_Char)
AND
DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisabledFlag, _RolledForFlag, _GroupSuccessFlag)
THEN
ObjectClearFlag(_Char, _RolledForFlag, 0);

//Intercept and add to DB_LLENEMY_StatusUpgradeBlocked(_Char, _Group, _Type) to block a specific group from applying regularly
QRY
LLENEMY_Upgrades_QRY_CanApplyGroupTypeUpgrades((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type)
THEN
LLENEMY_Upgrades_CanApplyGroupTypeUpgrades(_Char, _Group, _Type);

PROC
LLENEMY_Upgrades_CanApplyGroupTypeUpgrades((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type)
THEN
DB_NOOP(1);

PROC
LLENEMY_Upgrades_OnRollForGroup((CHARACTERGUID)_Char, (INTEGER)_Roll, (STRING)_Group)
AND
DB_LLENEMY_Upgrades_Types(_Group, _Type, _MinRoll, _MaxRoll, _CP)
//AND
//LLENEMY_Upgrades_QRY_Internal_LogGroupRoll(_Char, _Roll, _MinRoll, _MaxRoll, _Group, _Type)
AND
_Roll <= _MaxRoll
AND
_Roll >= _MinRoll
THEN
LLENEMY_Upgrades_CanApplyGroupTypeUpgrades(_Char, _Group, _Type);
LLENEMY_Upgrades_Internal_RollGroupTypeUpgrades(_Char, _Group, _Type);
LLENEMY_Upgrades_CleanupBlockedUpgrades(_Char, _Group, _Type);

QRY
LLENEMY_Upgrades_QRY_Internal_LogGroupRoll((CHARACTERGUID)_Char, (INTEGER)_Roll, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (STRING)_Group, (STRING)_Type)
AND
IntegertoString(_Roll, _RollStr)
AND
IntegertoString(_MinRoll, _MinStr)
AND
IntegertoString(_MaxRoll, _MaxStr)
AND
CharacterGetDisplayName(_Char, _, _Name)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Upgrades:LogGroupRoll] [",_Name,"] Roll [", _RollStr, "] Group [",_Group,"] Type [",_Type,"] Min[",_MinStr,"] Max[",_MaxStr,"]");

QRY
LLENEMY_Upgrades_QRY_CanApplyUpgrade((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (STRING)_Status, (REAL)_Duration)
THEN
//LLENEMY_Upgrades_CanApplyUpgrade(_Char, _Group, _Type, _Status);
LLENEMY_Upgrades_CanApplyUpgrade(_Char, _Group, _Type, _Status, _Duration);
LLENEMY_Upgrades_Internal_CheckBlockedStatuses(_Char, _Group, _Type, _Status, _Duration);

/* Used to run additional logic after an upgrade may be blocked. */
PROC
LLENEMY_Upgrades_Internal_CheckBlockedStatuses((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (STRING)_Status, (REAL)_Duration)
THEN
//DB_LLENEMY_StatusUpgradeBlocked(_Char, _Group, _Type, _Status)
DB_NOOP(1);

/* Skip applying upgrades if the status is already active, and has an equal or greater duration. */
PROC
LLENEMY_Upgrades_CanApplyUpgrade((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (STRING)_Status, (REAL)_Duration)
AND
GetStatusTurns(_Char, _Status, _Turns)
AND
_Duration > 0.0
AND
Real(_Turns, _TurnsR)
AND
RealProduct(_TurnsR, 6.0, _CurrentDuration)
AND
_CurrentDuration >= _Duration
THEN
DB_LLENEMY_StatusUpgradeBlocked(_Char, _Group, _Type, _Status);

PROC
LLENEMY_Upgrades_Internal_RollGroupTypeUpgrades((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type)
AND
NOT DB_LLENEMY_StatusUpgradeBlocked(_Char, _Group, _Type)
AND
DB_LLENEMY_Upgrades_TypeRollValues(_Group, _Type, _StartInt, _RollMaxInt)
AND
_RollMaxInt > 0
// [BEGIN_NO_OSITOOLS]
AND
LeaderLib_Random_QRY(_RollMaxInt)
AND
DB_LeaderLib_Random(_Roll)
AND
// [END_NO_OSITOOLS]
/* [OSITOOLS_ONLY]
AND
LeaderLib_Ext_Random(0,_RollMaxInt,_Roll)
AND
*/
LLENEMY_Upgrades_QRY_Internal_CheckForTypeCriticalFailure(_Char, _Group, _Type, _Roll)
AND
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _MinRoll, _MaxRoll, _Duration, _CP)
AND
_Roll <= _MaxRoll
AND
_Roll >= _MinRoll
AND
LLENEMY_Upgrades_QRY_CanApplyUpgrade(_Char, _Group, _Type, _Status, _Duration)
AND
NOT DB_LLENEMY_StatusUpgradeBlocked(_Char, _Group, _Type, _Status)
THEN
NOT DB_LeaderLib_Random(_Roll);
LLENEMY_Upgrades_Internal_LogStatusRoll(_Char, _Roll, _MinRoll, _MaxRoll, _Group, _Type, _Status);
LLENEMY_Upgrades_ApplyUpgrade(_Char, _Group, _Type, _Status, _Duration, _CP);
LLENEMY_Upgrades_OnRollForGroupSucceeded(_Char, _Group, _Type);

PROC
LLENEMY_Upgrades_Internal_LogStatusRoll((CHARACTERGUID)_Char, (INTEGER)_Roll, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (STRING)_Group, (STRING)_Type, (STRING)_Status)
AND
DB_GlobalFlag("LeaderLib_IsEditorMode")
AND
IntegertoString(_Roll, _RollStr)
AND
IntegertoString(_MinRoll, _MinStr)
AND
IntegertoString(_MaxRoll, _MaxStr)
AND
CharacterGetDisplayName(_Char, _, _Name)
THEN
LeaderLog_Log("DEBUG", "[LLENEMY_Upgrades_Internal_RollGroupTypeUpgrades] [",_Name,"] Roll Successful (",_Status,") [", _RollStr, "] Min[",_MinStr,"] Max[",_MaxStr,"] Group [",_Group,"] Type [",_Type,"]");

QRY
LLENEMY_Upgrades_QRY_Internal_CheckForTypeCriticalFailure((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (INTEGER)_Roll)
THEN
LLENEMY_Upgrades_Internal_CheckForTypeCriticalFailure(_Char, _Group, _Type, _Roll);

PROC
LLENEMY_Upgrades_Internal_CheckForTypeCriticalFailure((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (INTEGER)_Roll)
AND
_Roll == 0
AND
CharacterGetDisplayName(_Char, _, _Name)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Buffs:CheckForTypeCriticalFailure] [",_Name,"] Rolled a 0 for Group [",_Group,"] and Type [",_Type,"]! Critical failure!");
LLENEMY_Upgrades_OnTypeCriticalFailure(_Char, _Group, _Type);

PROC
LLENEMY_Upgrades_OnTypeCriticalFailure((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type)
THEN
DB_NOOP(1);

PROC
LLENEMY_Upgrades_OnRollForGroupSucceeded((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type)
AND
DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisableFlag, _RolledForFlag, _GroupSuccessFlag)
AND
_GroupSuccessFlag != ""
THEN
ObjectSetFlag(_Char, _GroupSuccessFlag, 0);

PROC
LLENEMY_Upgrades_CleanupBlockedUpgrades((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type)
AND
DB_LLENEMY_StatusUpgradeBlocked(_Char, _Group, _Type)
THEN
NOT DB_LLENEMY_StatusUpgradeBlocked(_Char, _Group, _Type);

PROC
LLENEMY_Upgrades_CleanupBlockedUpgrades((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type)
AND
DB_LLENEMY_StatusUpgradeBlocked(_Char, _Group, _Type, _Status)
THEN
NOT DB_LLENEMY_StatusUpgradeBlocked(_Char, _Group, _Type, _Status);

PROC
LLENEMY_Upgrades_CleanupBlockedUpgrades((CHARACTERGUID)_Char)
AND
DB_LLENEMY_StatusUpgradeBlocked(_Char, _Group, _Type, _Status)
THEN
NOT DB_LLENEMY_StatusUpgradeBlocked(_Char, _Group, _Type, _Status);
//END_REGION

//REGION APPLY_SHORTCUT
QRY
LLENEMY_Upgrades_QRY_IsRegistered((STRING)_Status)
AND
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _MinRoll, _MaxRoll, _Duration, _CP)
THEN
DB_NOOP(1);

PROC
LLENEMY_Upgrades_ApplyByStatus((CHARACTERGUID)_Char, (STRING)_Status)
AND
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _MinRoll, _MaxRoll, _Duration, _CP)
THEN
LLENEMY_Upgrades_IncreaseChallengePoints(_Char, _CP);
ApplyStatus(_Char, _Status, _Duration, 1, _Char);

PROC
LLENEMY_Upgrades_ApplyByStatus((CHARACTERGUID)_Char, (STRING)_Status, (REAL)_CustomDuration)
AND
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _MinRoll, _MaxRoll, _Duration, _CP)
THEN
LLENEMY_Upgrades_IncreaseChallengePoints(_Char, _CP);
ApplyStatus(_Char, _Status, _CustomDuration, 1, _Char);

PROC
LLENEMY_Upgrades_ApplyByStatus((CHARACTERGUID)_Char, (STRING)_Status)
AND
NOT LLENEMY_Upgrades_QRY_IsRegistered(_Status)
THEN
ApplyStatus(_Char, _Status, -1.0, 1, _Char);

PROC
LLENEMY_Upgrades_ApplyByStatus((CHARACTERGUID)_Char, (STRING)_Status, (REAL)_CustomDuration)
AND
NOT LLENEMY_Upgrades_QRY_IsRegistered(_Status)
THEN
ApplyStatus(_Char, _Status, _CustomDuration, 1, _Char);
//END_REGION

//REGION REDIRECT_UPGRADE
/* Redirect an upgrade. This is typically used in LLENEMY_Upgrades_CanApplyUpgrade. */
PROC
LLENEMY_Upgrades_RedirectUpgrade((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (STRING)_Status, (STRING)_NewStatus)
AND
HasActiveStatus(_Char, _NewStatus, _HasRedirectedStatus)
THEN
DB_LLENEMY_StatusUpgradeBlocked(_Char, _Group, _Type, _Status);
LLENEMY_Upgrades_Internal_ApplyRedirectedUpgrade(_Char, _Group, _Type, _Status, _NewStatus, _HasRedirectedStatus);
//END_REGION

//REGION REDIRECT_UPGRADE_RANDOM
// The target upgrade exists, so use its data.
PROC
LLENEMY_Upgrades_RedirectUpgradeToGroupType((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (STRING)_Status, (STRING)_NewGroup, (STRING)_NewType)
THEN
DB_LLENEMY_StatusUpgradeBlocked(_Char, _Group, _Type, _Status);

PROC
LLENEMY_Upgrades_RedirectUpgradeToGroupType((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (STRING)_Status, (STRING)_NewGroup, (STRING)_NewType)
AND
DB_LLENEMY_Upgrades_TypeRollValues(_NewGroup, _NewType, _StartInt, _RollMaxInt)
AND
_RollMaxInt > 0
// [BEGIN_NO_OSITOOLS]
AND
LeaderLib_Random_QRY(_RollMaxInt)
AND
DB_LeaderLib_Random(_Roll)
AND
// [END_NO_OSITOOLS]
/* [OSITOOLS_ONLY]
AND
LeaderLib_Ext_Random(0,_RollMaxInt,_Roll)
AND
*/
_Roll > 0
AND
DB_LLENEMY_Upgrades_Statuses(_NewGroup, _NewType, _NewStatus, _MinRoll, _MaxRoll, _Duration, _CP)
AND
_Roll <= _MaxRoll
AND
_Roll >= _MinRoll
AND
LLENEMY_Upgrades_QRY_CanApplyUpgrade(_Char, _NewGroup, _NewType, _NewStatus, _Duration)
AND
NOT DB_LLENEMY_StatusUpgradeBlocked(_Char, _NewGroup, _NewType, _NewStatus)
AND
HasActiveStatus(_Char, _NewStatus, _HasRedirectedStatus)
THEN
NOT DB_LeaderLib_Random(_Roll);
LLENEMY_Upgrades_Internal_ApplyRedirectedUpgrade(_Char, _Group, _Type, _Status, _NewStatus, _HasRedirectedStatus);
//END_REGION

//REGION REDIRECT_UPGRADE_APPLY
PROC
LLENEMY_Upgrades_Internal_ApplyRedirectedUpgrade((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (STRING)_Status, (STRING)_NewStatus, 0)
AND
DB_LLENEMY_Upgrades_Statuses(_NextGroup, _NextType, _NewStatus, _MinRoll, _MaxRoll, _Duration, _CP)
THEN
DB_LLENEMY_Upgrades_Temp_RedirectedUpgradeResolved(_Char, _Status, _NewStatus);
LLENEMY_Upgrades_ApplyUpgrade(_Char, _NextGroup, _NextType, _NewStatus, _Duration, _CP);

// The target upgrade does not exist, so use the existing one.
PROC
LLENEMY_Upgrades_Internal_ApplyRedirectedUpgrade((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (STRING)_Status, (STRING)_NewStatus, 0)
AND
NOT DB_LLENEMY_Upgrades_Temp_RedirectedUpgradeResolved(_Char, _Status, _NewStatus)
AND
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _MinRoll, _MaxRoll, _Duration, _CP)
THEN
DB_LLENEMY_Upgrades_Temp_RedirectedUpgradeResolved(_Char, _Status, _NewStatus);
LLENEMY_Upgrades_ApplyUpgrade(_Char, _Group, _Type, _NewStatus, _Duration, _CP);

// If the character already has the redirected status, randomly extend the duration instead.
/* [OSITOOLS_ONLY]
PROC
LLENEMY_Upgrades_Internal_ApplyRedirectedUpgrade((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (STRING)_Status, (STRING)_NewStatus, 1)
AND
NOT DB_LLENEMY_Statuses_FixedDuration(_Status)
AND
NOT DB_LLENEMY_Upgrades_Temp_RedirectedUpgradeResolved(_Char, _Status, _NewStatus)
AND
NRD_StatusGetHandle(_Char, _NewStatus, _Handle)
AND
NRD_StatusGetReal(_Char, _Handle, "CurrentLifeTime", _CurrentDuration)
AND
_CurrentDuration > 0.0
AND
_CurrentDuration <= 12.0
AND
NRD_RandomReal(0.0, 6.0, _Rnd)
AND
RealSum(_CurrentDuration, _Rnd, _Next)
AND
RealMin(_Next, 18.0, _NextDuration) // Don't get too crazy with the turn extensions
AND
_NextDuration != _CurrentDuration
THEN
LLENEMY_Upgrades_IncreaseChallengePoints(_Char, 1);
DB_LLENEMY_Upgrades_Temp_RedirectedUpgradeResolved(_Char, _Status, _NewStatus);
NRD_StatusSetReal(_Char, _Handle, "CurrentLifeTime", _NextDuration);
*/

PROC
LLENEMY_Upgrades_Internal_ApplyRedirectedUpgrade((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (STRING)_Status, (STRING)_NewStatus, (INTEGER)_HasRedirectedStatus)
AND
DB_LLENEMY_Upgrades_Temp_RedirectedUpgradeResolved(_Char, _Status, _NewStatus)
THEN
NOT DB_LLENEMY_Upgrades_Temp_RedirectedUpgradeResolved(_Char, _Status, _NewStatus);
//END_REGION

//REGION CHALLENGE_POINTS
PROC
LLENEMY_Upgrades_IncreaseChallengePoints((CHARACTERGUID)_Char, (INTEGER)_CP)
AND
NOT GetVarInteger(_Char, "LLENEMY_ChallengePoints", _)
AND
CharacterGetLevel(_Char, _Level)
THEN
SetVarInteger(_Char, "LLENEMY_ChallengePoints", _Level);

PROC
LLENEMY_Upgrades_IncreaseChallengePoints((CHARACTERGUID)_Char, (INTEGER)_CP)
AND
GetVarInteger(_Char, "LLENEMY_ChallengePoints", _TotalPoints)
AND
IntegerSum(_CP, _TotalPoints, _NextTotal)
THEN
SetVarInteger(_Char, "LLENEMY_ChallengePoints", _NextTotal);

PROC
LLENEMY_Upgrades_IncreaseChallengePoints((CHARACTERGUID)_Char, (INTEGER)_CP)
AND
GetVarInteger(_Char, "LLENEMY_ChallengePoints", _TotalPoints)
AND
CharacterGetLevel(_Char, _Level)
AND
IntegerSubtract(_TotalPoints, _Level, _UpgradeCP)
AND
_UpgradeCP >= 40
THEN
SetIsBoss(_Char, 1);
//END_REGION

//REGION APPLY_UPGRADE
// This query allows overriding durations before the EUO does its thing.
QRY
LLENEMY_Upgrades_QRY_ApplyStatus((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (STRING)_Status, (REAL)_Duration, (INTEGER)_IsHardMode)
AND
1 == 0
THEN
DB_NOOP(1);

PROC
LLENEMY_Upgrades_ApplyUpgrade((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (STRING)_Status, (REAL)_Duration, (INTEGER)_CP)
THEN
LLENEMY_Upgrades_IncreaseChallengePoints(_Char, _CP);
ObjectSetFlag(_Char, "LLENEMY_UpgradesAdded", 0);

PROC
LLENEMY_Upgrades_ApplyUpgrade((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (STRING)_Status, (REAL)_Duration, (INTEGER)_CP)
AND
NOT GetStatusTurns(_Char, _Status, -1)
AND
GlobalGetFlag("LLENEMY_HardModeEnabled", _HardMode)
AND
NOT LLENEMY_Upgrades_QRY_ApplyStatus(_Char, _Group, _Type, _Status, _Duration, _HardMode)
THEN
LLENEMY_Upgrades_ApplyStatus(_Char, _Group, _Type, _Status, _Duration, _HardMode);

// Non-permanent hardmode duration modification
/* [OSITOOLS_ONLY]
PROC
LLENEMY_Upgrades_ApplyStatus((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (STRING)_Status, (REAL)_Duration, 1)
AND
NOT DB_LLENEMY_Statuses_FixedDuration(_Status)
AND
_Duration > 0.0
AND
NRD_RandomReal(6.0, 18.0, _Ran)
AND
RealSum(_Ran, 0.5, _RanMod) // Helps with rounding
AND
NRD_Round(_RanMod, _RanRounded)
AND
RealSum(_Duration, _RanRounded, _NewDuration)
THEN
LLENEMY_Upgrades_Internal_FinallyApplyStatus(_Char, _Status, _NewDuration);
*/

// [BEGIN_NO_OSITOOLS]
PROC
LLENEMY_Upgrades_ApplyStatus((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (STRING)_Status, (REAL)_Duration, 1)
AND
_Duration > 0.0
AND
NOT DB_LLENEMY_Statuses_FixedDuration(_Status)
AND
LeaderLib_Random_QRY(6,18)
AND
DB_LeaderLib_Random(_RanInt)
AND
Real(_RanInt, _Ran)
AND
RealSum(_Duration, _Ran, _NewDuration)
THEN
ApplyStatus(_Char, _Status, _NewDuration, 1, _Char);
// [END_NO_OSITOOLS]

PROC
LLENEMY_Upgrades_ApplyStatus((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (STRING)_Status, (REAL)_Duration, 1)
AND
DB_LLENEMY_Statuses_FixedDuration(_Status)
THEN
LLENEMY_Upgrades_Internal_FinallyApplyStatus(_Char, _Status, _Duration);

// Non-hardmode regular durations
PROC
LLENEMY_Upgrades_ApplyStatus((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (STRING)_Status, (REAL)_Duration, 0)
AND
_Duration > 0.0
THEN
LLENEMY_Upgrades_Internal_FinallyApplyStatus(_Char, _Status, _Duration);

PROC
LLENEMY_Upgrades_ApplyStatus((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (STRING)_Status, (REAL)_Duration, (INTEGER)_IsHardMode)
AND
_Duration <= 0.0
THEN
ApplyStatus(_Char, _Status, _Duration, 1, _Char);

// [BEGIN_NO_OSITOOLS]
PROC
LLENEMY_Upgrades_Internal_FinallyApplyStatus((CHARACTERGUID)_Char, (STRING)_Status, (REAL)_Duration)
THEN
ApplyStatus(_Char, _Status, _Duration, 1, _Char);
// [END_NO_OSITOOLS]

PROC
LLENEMY_Upgrades_Internal_FinallyApplyStatus((CHARACTERGUID)_Char, (STRING)_Status, (REAL)_Duration)
AND
GlobalGetFlag("LLENEMY_WorldUpgradesEnabled", 0)
THEN
DB_LLENEMY_Upgrades_Temp_StatusApplied(_Char, _Status);
ApplyStatus(_Char, _Status, _Duration, 1, _Char);

PROC
LLENEMY_Upgrades_Internal_FinallyApplyStatus((CHARACTERGUID)_Char, (STRING)_Status, (REAL)_Duration)
AND
NOT DB_LLENEMY_Upgrades_Temp_StatusApplied(_Char, _Status)
AND
GlobalGetFlag("LLENEMY_WorldUpgradesEnabled", 1)
AND
CharacterIsInCombat(_Char, 1)
THEN
DB_LLENEMY_Upgrades_Temp_StatusApplied(_Char, _Status);
ApplyStatus(_Char, _Status, _Duration, 1, _Char);

PROC
LLENEMY_Upgrades_Internal_FinallyApplyStatus((CHARACTERGUID)_Char, (STRING)_Status, (REAL)_Duration)
AND
NOT DB_LLENEMY_Upgrades_Temp_StatusApplied(_Char, _Status)
AND
NOT DB_LLENEMY_Upgrades_Temp_ChangeDurationOnCombat(_, _Char, _Status, _)
AND
CharacterIsInCombat(_Char, 0)
AND
GetRegion(_Char, _Region)
THEN
DB_LLENEMY_Upgrades_Temp_ChangeDurationOnCombat(_Region, _Char, _Status, _Duration);
ApplyStatus(_Char, _Status, -1.0, 1, _Char);

PROC
LLENEMY_Upgrades_Internal_FinallyApplyStatus((CHARACTERGUID)_Char, (STRING)_Status, (REAL)_Duration)
AND
DB_LLENEMY_Upgrades_Temp_StatusApplied(_Char, _Status)
THEN
NOT DB_LLENEMY_Upgrades_Temp_StatusApplied(_Char, _Status);

IF
ObjectEnteredCombat((CHARACTERGUID)_Char, _)
AND
DB_LLENEMY_Upgrades_Temp_ChangeDurationOnCombat(_Region, _Char, _Status, _Duration)
THEN
NOT DB_LLENEMY_Upgrades_Temp_ChangeDurationOnCombat(_Region, _Char, _Status, _Duration);
LLENEMY_Upgrades_Internal_ChangeStatusDuration(_Char, _Status, _Duration);

/* [OSITOOLS_ONLY]
PROC
LLENEMY_Upgrades_Internal_ChangeStatusDuration((CHARACTERGUID)_Char, (STRING)_Status, (REAL)_Duration)
AND
NRD_StatusGetHandle(_Char, _Status, _Handle)
THEN
NRD_StatusSetReal(_Char, _Handle, "CurrentLifeTime", _Duration);
NRD_StatusSetReal(_Char, _Handle, "LifeTime", _Duration);
*/

PROC
LLENEMY_Upgrades_Internal_ChangeStatusDuration((CHARACTERGUID)_Char, (STRING)_Status, (REAL)_Duration)
AND
HasActiveStatus(_Char, _Status, 0)
THEN
ApplyStatus(_Char, _Status, _Duration, 1, _Char);

IF
RegionEnded(_Region)
AND
DB_LLENEMY_Upgrades_Temp_ChangeDurationOnCombat(_Region, _Char, _Status, _Duration)
THEN
NOT DB_LLENEMY_Upgrades_Temp_ChangeDurationOnCombat(_Region, _Char, _Status, _Duration);

IF
CharacterDied(_Char)
AND
DB_LLENEMY_Upgrades_Temp_ChangeDurationOnCombat(_Region, _Char, _Status, _Duration)
THEN
NOT DB_LLENEMY_Upgrades_Temp_ChangeDurationOnCombat(_Region, _Char, _Status, _Duration);
//END_REGION

//REGION DEBUG
IF
TextEventSet("llenemy_rantest")
AND
GetTextEventParamInteger(1, _Modulo)
AND
GetTextEventParamInteger(2, _RollAmount)
THEN
LeaderLog_LogInt("DEBUG", "[LLENEMY:Debug:RandomTest] Rolling [",_RollAmount,"] times with modulo [",_Modulo,"].");
DB_LLENEMY_Debug_TestRan(_Modulo, _RollAmount);
LeaderLib_Random_CreateSeed();
LLENEMY_Debug_TestRandom();

PROC
LLENEMY_Debug_TestRandom()
AND
DB_LLENEMY_Debug_TestRan(_Modulo, _RollAmount)
AND
_RollAmount > 0
AND
IntegerSubtract(_RollAmount, 1, _NextAmount)
AND
LeaderLib_Random_QRY(_Modulo)
AND
DB_LeaderLib_Random(_Ran)
THEN
LeaderLog_LogInt("DEBUG", "[LLENEMY:Debug:RandomTest] Roll [",_RollAmount,"] = [",_Ran,"]");
NOT DB_LLENEMY_Debug_TestRan(_Modulo, _RollAmount);
DB_LLENEMY_Debug_TestRan(_Modulo, _NextAmount);
LLENEMY_Debug_TestRandom();

PROC
LLENEMY_Debug_TestRandom()
AND
DB_LLENEMY_Debug_TestRan(_Modulo, _RollAmount)
AND
_RollAmount <= 0
THEN
NOT DB_LLENEMY_Debug_TestRan(_Modulo, _RollAmount);
LeaderLog_Log("TRACE", "[LLENEMY:Debug:RandomTest] Rolling complete.");

IF
TextEventSet("llenemy_randefaulttest")
AND
GetTextEventParamInteger(1, _Modulo)
AND
GetTextEventParamInteger(2, _RollAmount)
THEN
LeaderLog_LogInt("DEBUG", "[LLENEMY:Debug:RandomDefaultTest] Rolling [",_RollAmount,"] times with modulo [",_Modulo,"].");
DB_LLENEMY_Debug_TestRanDefault(_Modulo, _RollAmount);
LLENEMY_Debug_TestRandomDefault();

PROC
LLENEMY_Debug_TestRandomDefault()
AND
DB_LLENEMY_Debug_TestRanDefault(_Modulo, _RollAmount)
AND
_RollAmount > 0
AND
IntegerSubtract(_RollAmount, 1, _NextAmount)
AND
Random(_Modulo, _Ran)
THEN
LeaderLog_LogInt("DEBUG", "[LLENEMY:Debug:RandomTest] Result [",_Ran,"] Roll Number [",_RollAmount,"]");
NOT DB_LLENEMY_Debug_TestRanDefault(_Modulo, _RollAmount);
DB_LLENEMY_Debug_TestRanDefault(_Modulo, _NextAmount);
LLENEMY_Debug_TestRandomDefault();

PROC
LLENEMY_Debug_TestRandomDefault()
AND
DB_LLENEMY_Debug_TestRanDefault(_Modulo, _RollAmount)
AND
_RollAmount <= 0
THEN
NOT DB_LLENEMY_Debug_TestRanDefault(_Modulo, _RollAmount);
LeaderLog_Log("TRACE", "[LLENEMY:Debug:RandomTest] Rolling complete.");
//END_REGION

//REGION ELITES
PROC
LLENEMY_Upgrades_OnRollingDone((CHARACTERGUID)_Char)
AND
DB_CurrentLevel(_Level)
THEN
LLENEMY_Upgrades_OnRollingDone(_Char, _Level);

PROC
LLENEMY_Upgrades_OnRollingDone((CHARACTERGUID)_Char, (STRING)_Level)
AND
DB_LLENEMY_Elites(_Level, _Char, _Group, _Type, _BonusUpgrades)
AND
LLENEMY_Upgrades_QRY_CanRollForGroup(_Group)
THEN
LLENEMY_Upgrades_Internal_ApplyEliteBonuses(_Char, _Group, _Type, _BonusUpgrades);
LLENEMY_Upgrades_Internal_OnEliteBonusRolled(_Char, _Group, _Type, _BonusUpgrades);

PROC
LLENEMY_Upgrades_Internal_ApplyEliteBonuses((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (INTEGER)_Amount)
AND
IsTagged(_Char, "LLENEMY_Elite", 0)
THEN
SetTag(_Char, "LLENEMY_Elite");

PROC
LLENEMY_Upgrades_Internal_ApplyEliteBonuses((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (INTEGER)_Amount)
AND
_Amount > 0
// [BEGIN_NO_OSITOOLS]
AND
LeaderLib_Random_QRY(999)
AND
DB_LeaderLib_Random(_Roll)
AND
// [END_NO_OSITOOLS]
/* [OSITOOLS_ONLY]
AND
LeaderLib_Ext_Random(0,999,_Roll)
AND
*/
LLENEMY_Upgrades_QRY_Internal_CheckForTypeCriticalFailure(_Char, _Group, _Type, _Roll)
AND
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _MinRoll, _MaxRoll, _Duration, _CP)
AND
_Roll <= _MaxRoll
AND
_Roll >= _MinRoll
AND
CharacterGetDisplayName(_Char, _, _Name)
THEN
NOT DB_LeaderLib_Random(_Roll);
LeaderLog_Log("TRACE", "[LLENEMY:Buffs:ApplyEliteBonuses] Adding elite bonus to [",_Name,"] - [",_Group,":",_Type,"] Status [",_Status,"].");
LLENEMY_Upgrades_ApplyUpgrade(_Char, _Group, _Type, _Status, _Duration, _CP);

PROC
LLENEMY_Upgrades_Internal_OnEliteBonusRolled((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type, (INTEGER)_Amount)
AND
_Amount > 1
AND
IntegerSubtract(_Amount, 1, _NewAmount)
THEN
LLENEMY_Upgrades_Internal_ApplyEliteBonuses(_Char, _Group, _Type, _NewAmount);
LLENEMY_Upgrades_Internal_OnEliteBonusRolled(_Char, _Group, _Type, _NewAmount);

PROC
LLENEMY_Upgrades_OnRollingDone((CHARACTERGUID)_Char, (STRING)_Level)
AND
DB_LLENEMY_Elites_GuaranteedUpgrades(_Level, _Char, _Status, _Duration)
AND
NOT LeaderLib_Helper_QRY_HasStatus(_Char, _Status)
AND
LLENEMY_Upgrades_QRY_CanRollForStatus(_Status)
THEN
LLENEMY_Upgrades_Internal_ApplyGuaranteedEliteBonus(_Char, _Status, _Duration);

PROC
LLENEMY_Upgrades_OnRollingDone((CHARACTERGUID)_Char, (STRING)_Level)
THEN
LLENEMY_Upgrades_CleanupBlockedUpgrades(_Char);

PROC
LLENEMY_Upgrades_Internal_ApplyGuaranteedEliteBonus((CHARACTERGUID)_Char, (STRING)_Status, (REAL)_Duration)
AND
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _MinRoll, _MaxRoll, _, _CP)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Buffs:OnRollingDone] Adding guaranteed elite bonus - [",_Group,":",_Type,"] Status [",_Status,"].");
LLENEMY_Upgrades_ApplyUpgrade(_Char, _Group, _Type, _Status, _Duration, _CP);

PROC
LLENEMY_Upgrades_Internal_ApplyGuaranteedEliteBonus((CHARACTERGUID)_Char, (STRING)_Status, (REAL)_Duration)
AND
NOT DB_LLENEMY_Upgrades_Statuses(_, _, _Status, _, _, _, _)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Buffs:OnRollingDone] Adding non-registered, guaranteed elite bonus to Status [",_Status,"].");
LLENEMY_Upgrades_ApplyUpgrade(_Char, "", "", _Status, _Duration, 2);
//END_REGION

//REGION UPGRADE_ALL_IN_REGION
PROC
LLENEMY_Upgrades_Internal_UpgradeRegion((STRING)_Region)
THEN
CharacterLaunchOsirisOnlyIterator("LLENEMY_Upgrades_UpgradeEnemy");

IF
StoryEvent((CHARACTERGUID)_Char, "LLENEMY_Upgrades_UpgradeEnemy")
THEN
LLENEMY_Upgrades_UpgradeEnemy(_Char);

PROC
LLENEMY_Upgrades_UpgradeEnemy((CHARACTERGUID)_Char)
AND
CharacterIsDead(_Char, 0)
AND
ObjectIsOnStage(_Char, 1)
AND
NOT LeaderLib_Helper_QRY_IgnoreCharacter(_Char)
AND
NOT LeaderLib_Helper_QRY_CharacterIsPlayer(_Char)
AND
LLENEMY_Upgrades_QRY_CanAddUpgrades(_Char)
AND
LLENEMY_QRY_IsEnemyOfParty(_Char)
AND
GetRegion(_Char, _Region)
THEN
LLENEMY_Upgrades_Internal_StartRolling(_Char, _Region);
LLENEMY_Upgrades_SetWorldUpgradeFlag(_Char);

PROC
LLENEMY_Upgrades_SetWorldUpgradeFlag((CHARACTERGUID)_Char)
AND
DB_GlobalFlag("LLENEMY_WorldUpgradesEnabled")
THEN
ObjectSetFlag(_Char, "LLENEMY_WorldUpgradesAdded", 0);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader_EnemyUpgradeOverhaul"
